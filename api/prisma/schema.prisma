// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CreditCardStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum CreditCardType {
  VISA
  MASTERCARD
  AMERICAN_EXPRESS
  DISCOVER
  DINERS_CLUB
  JCB
  CHINA_UNION_PAY
}

model CreditCard {
  id               String           @id @default(uuid())
  card_name        String?          @db.VarChar(35)
  bank_name        String?          @db.VarChar(35)
  last_four_number Int              @db.Integer
  card_limit       Float?           @db.DoublePrecision
  credit_used      Float?           @db.DoublePrecision
  deadline_date    DateTime?
  payment_date     DateTime?
  status           CreditCardStatus
  type             CreditCardType
  user_id          String?
  created_at       DateTime         @default(now()) @db.Timestamp
  updated_at       DateTime         @default(now()) @db.Timestamp
  deleted_at       DateTime?
  user             User?            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Transaction      Transaction[]

  @@index([user_id])
  @@index([deleted_at])
  @@map("credit_cards")
}

model Payment {
  id             String       @id @default(uuid())
  amount         Float        @db.DoublePrecision
  payment_date   String       @db.VarChar(12)
  transaction_id String?
  created_at     DateTime     @default(now()) @db.Timestamptz
  updated_at     DateTime     @default(now()) @db.Timestamptz
  deleted_at     DateTime?
  transaction    Transaction? @relation(fields: [transaction_id], references: [id], onDelete: Cascade)

  @@index([transaction_id])
  @@index([deleted_at])
  @@map("payments")
}

model Transaction {
  id             String      @id @default(uuid())
  date           String      @db.VarChar(12)
  amount         Float       @db.DoublePrecision
  total_fees     Int         @db.Integer
  credit_card_id String?
  created_at     DateTime    @default(now()) @db.Timestamp
  updated_at     DateTime    @default(now()) @db.Timestamp
  deleted_at     DateTime?
  card           CreditCard? @relation(fields: [credit_card_id], references: [id], onDelete: Cascade)
  Payment        Payment[]

  @@index([credit_card_id])
  @@index([deleted_at])
  @@map("transactions")
}

model User {
  id         String       @id @default(uuid())
  email      String       @unique @db.VarChar(65)
  password   String       @db.VarChar(110)
  created_at DateTime     @default(now()) @db.Timestamp
  updated_at DateTime     @default(now()) @db.Timestamp
  deleted_at DateTime?
  cards      CreditCard[]

  @@index([email])
  @@index([deleted_at])
  @@map("users")
}
